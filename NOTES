
The mind-map is a directed graph of nodes.

The user can see a chain of nodes leading up to the present one. (Ideally, the whole history of the chain would be visible if desired, but just the most recent one or two historical nodes would be visible by default.)

Of the nodes referenced by the current node, the software determines which nodes are likely to be most interesting and displays a reasonable number of them to the user.

A node has the following properties:
    A type
    An owner user id
    A title
    A "Resolved" checkbox
    Text, potentially rendered with MathJAX
    A list of nodes it has outgoing references to
    A list of nodes it contains
    A (possibly empty) reference to its parent container node
    A (possibly empty) reference to its parent workspace node
    A BLOB of attachments?
    A list recording who it's shared with.
    	For workspace nodes, this means a list of user ids.
    	For standard nodes, I'm not sure what this means. It might mean user ids, but I suspect it means a list of node ids which have been duplicated from this node in other user environments.
    An 'original owner' user id?

A node can have the following types, which mostly affect display:
    Standard: contains text, an idea, some attachments.
    Container: contains other nodes, organizes them into a coherent project. Container nodes organize the whole ATLAS universe into a tree.
    Workspace: contains other nodes, shares them in a read-write environment with other ATLAS users.

~          ~           ~

There are two kinds of sharing: collaborative workspaces and noncollaborative nodes.

Collaborative workspace: 
    A container node which is shared across users.  Nodes dropped into this workspace are visible to and can be edited by all the users on the ownership list of the workspace node.

    Question: How should one deal with allowing users to delete shared nodes?  In particular, users are allowed to have private nodes reference shared nodes. What should happen to these references if the shared node is deleted? Some ideas: 
        Shared nodes should only be allowed to be 'merged' with some other existing node. All references are updated to point to the merged node.

        'Merging' is always an option, but 'deleting' a shared node always silently means merging it with the parent workspace, so that private references don't get completely lost. Maybe bad references can be mentioned to their owner so that they have a chance to be manually updated.

        Deleting the shared node also deletes all of its references.

~          ~           ~

Eventually we'll want to render these nodes nicely. Matt Pancia says that D3 offers a ton of smart ways to do drawing, and he suggests looking at the following URLs:

    http://d3js.org ,

    https://github.com/mbostock/d3/wiki/Tutorials .

One of the tutorials also suggested the following nice book:

    http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742 .

This is a nice article about building interfaces of your own which are hiddenly asynchronous, Ã  la Mongoose:

    https://codewords.recurse.com/issues/three/pseudosynchronous-javascript/ .
